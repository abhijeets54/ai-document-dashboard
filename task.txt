Front-End Intern Take-Home Project Brief


AI-Powered Document Dashboard
📋 Project Overview
Build a responsive dashboard for managing AI-generated documents using React.js and
Next.js. This project simulates the core functionality you’ll be working on during the
internship.
🎯 What You’ll Build
A document management dashboard with the following features: - Document Library:
Display a grid/list of AI-generated documents - Document Creation: Form to create new
documents with AI assistance - Document Preview: Modal or sidebar to preview
document content - Search & Filter: Search documents by title and filter by type/category
- Responsive Design: Mobile-first approach that works on all devices
️ Technical Requirements
Must Have:
• Framework: Next.js  (App Router preferred)
• Styling: Tailwind CSS 
• State Management: React hooks (useState, useEffect, useContext)
• API Integration: Fetch data from provided mock API endpoints
• TypeScript: Use TypeScript for type safety
• Components: Reusable component architecture
• Loading states and error handling
• Dark/Light theme toggle
• Pagination or infinite scroll
• Local storage for user preferences
• animations/transitions
📊 Mock API Endpoints
Use these mock endpoints (you can use json-server or mock them in your code):
GET /api/documents
[
{
"id": "1",
"title": "Marketing Strategy Q1 2025",
"type": "document",
"category": "business",

"content": "Lorem ipsum...",
"createdAt": "2025-01-15T10:30:00Z",
"aiGenerated": true,
"tags": ["marketing", "strategy", "Q1"]
}
]
POST /api/documents
{
"title": "Document Title",
"type": "document|slide|spreadsheet",
"prompt": "AI generation prompt",
"category": "business|personal|academic"
}
🎨 Design Requirements
Layout Structure:
1. Header: Logo, search bar, create document button
2. Sidebar: Filter options (document type, category, date range)
3. Main Content: Document grid/list with pagination
4. Document Card: Title, type icon, preview text, creation date, tags
Design Principles:
• Clean, modern interface
• Consistent spacing and typography
• Intuitive navigation
• Clear visual hierarchy
• Accessible color contrast
📱 Responsive Breakpoints
• Mobile: 320px - 768px (stacked layout, collapsible sidebar)
• Tablet: 768px - 1024px (partial sidebar, 2-column grid)
• Desktop: 1024px+ (full sidebar, 3-4 column grid)
🔧 Implementation Guidelines
Project Structure:
src/
├── components/
│ ├── ui/ # Reusable UI components
│ ├── forms/ # Form components
│ └── layout/ # Layout components
├── pages/ or app/ # Next.js pages/routes
├── hooks/ # Custom React hooks
├── types/ # TypeScript types

├── utils/ # Utility functions
└── styles/ # Global styles

Component Examples:
• DocumentCard - Individual document display
• DocumentGrid - Grid layout for documents
• SearchBar - Search functionality
• FilterSidebar - Filter options
• CreateDocumentModal - Document creation form


🎯 Evaluation Criteria
Code Quality (25%)
• Clean, readable code structure
• Proper TypeScript usage
• Consistent naming conventions
• Appropriate comments
React/Next.js Skills (25%)
• Efficient component composition
• Proper hook usage
• State management
• Next.js best practices
UI/UX Implementation (25%)
• Responsive design execution
• Visual design quality
• User experience flow
• Accessibility considerations
Functionality (25%)
• Feature completeness
• API integration
• Error handling
• Performance optimization
📝 Submission Requirements
Deliverables:
1. GitHub Repository: Public repo with clean commit history
2. Live Demo: Deploy on Vercel, Netlify, or similar
3. README.md: Setup instructions and feature overview
4. Documentation: Brief explanation of architecture decisions

README Template:
# AI Document Dashboard
## Features
- [List implemented features]
## Tech Stack
- [List technologies used]
## Setup Instructions
1. Clone repository
2. Install dependencies: `npm install`
3. Run development server: `npm run dev`
4. Open http://localhost:3000
## Live Demo
[Deployment URL]
## Architecture Decisions
[Brief explanation of key decisions]


⏰ Timeline & Submission
• Submission: Email GitHub repo link and live demo URL
• Questions: Feel free to ask clarifying questions


🔍 Bonus Points
• Performance: Optimized images, lazy loading
• Accessibility: ARIA labels, keyboard navigation
• Testing: Unit tests for key components
• Documentation: Inline code documentation
• Innovation: Creative features or improvements